{"version":3,"sources":["containers/Login/Login.js"],"names":["Login","state","controls","email","elementType","elementConfig","type","placeholder","label","value","hint","validation","required","isEmail","valid","touched","password","isPassword","isSignUp","inputChangedHandler","event","controlName","updateControls","Object","C_Users_ZAYN_WebDev_softforest_deploy_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_this","C_Users_ZAYN_WebDev_softforest_deploy_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","props","onAuthLogin","prevProps","this","userId","_this2","token","console","log","history","push","authRedirectPath","fomElementArray","key","id","config","form","map","formElemet","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_11__","invalid","shouldValidate","changed","className","error","class","role","non_field_errors","data-dismiss","aria-label","aria-hidden","onSubmit","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_15__","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_12__","btnType","react_router_dom__WEBPACK_IMPORTED_MODULE_10__","to","Component","withRouter","connect","authReducer","dispatch","actions"],"mappings":"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","file":"static/js/18.5c568547.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport { checkValidity } from '../../shared/utility';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Enter your email'\r\n                },\r\n                label: 'Email:',\r\n                value: '',\r\n                hint: 'Email Must contains @ and valid Domain',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Enter your password'\r\n                },\r\n                label: 'Password:',\r\n                value: '',\r\n                hint: 'Password must contains atleast 8 character ',\r\n                validation: {\r\n                    required: true,\r\n                    isPassword: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignUp: true,\r\n    };\r\n    componentDidUpdate(prevProps) {\r\n        const { userId } = this.props;\r\n        if (userId !== prevProps.userId) {\r\n        }\r\n\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updateControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        };\r\n        this.setState({ controls: updateControls });\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuthLogin(this.state.controls.email.value, this.state.controls.password.value);\r\n        \r\n    }\r\n\r\n    render() {\r\n        // let redirect = null;\r\n        if (this.props.token && this.props.userId) {\r\n            console.log('Zainnnnnnnnnnnnnnnn');\r\n            //console.log(this.props);\r\n            // const { from } = this.props.location.state || { from: { pathname: '/' } };\r\n            // this.props.history.push(from);\r\n            // redirect = <Redirect to={from} />\r\n            this.props.history.push(this.props.authRedirectPath);\r\n        }\r\n        const fomElementArray = [];\r\n        for (let key in this.state.controls) {\r\n            fomElementArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n        let form = fomElementArray.map(formElemet => (\r\n            <Input elementType={formElemet.config.elementType}\r\n                elementConfig={formElemet.config.elementConfig}\r\n                value={formElemet.config.value}\r\n                key={formElemet.id}\r\n                invalid={!formElemet.config.valid}\r\n                shouldValidate={formElemet.config.validation}\r\n                touched={formElemet.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElemet.id)}\r\n                hint={formElemet.config.hint}\r\n                label={formElemet.config.label} />\r\n        ));\r\n        return (\r\n\r\n            <div className=\" container mb-5\">\r\n                {/* {redirect} */}\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-2 col-lg-4\">\r\n                    </div>\r\n                    <div className=\"col-md-8 col-lg-4 \">\r\n                        <div className=\"form__Login \">\r\n                            <h3 className=\"font-weight-bold text-center text-uppercase \">Login</h3>\r\n                            {\r\n                                this.props.error ? <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n                                    <strong>Error!</strong> {this.props.error.non_field_errors}\r\n                                    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                                        <span aria-hidden=\"true\">&times;</span>\r\n                                    </button>\r\n                                </div> : null\r\n                            }\r\n                            <form onSubmit={this.submitHandler} >\r\n                                {form}\r\n                                <div className=\"text-center\">\r\n                                    {\r\n                                        this.props.loading ? <Spinner />\r\n                                            : <Button btnType=\"Btn-primary Btn-lg \" >Login</Button>\r\n                                    }\r\n                                </div>\r\n                            </form>\r\n                            <div className=\"form__Button pt-4 text-center \">\r\n                                <p className=\"form__paragraph\" >New to SoftForest?</p>\r\n                                <Link className=\"form__Buttton--SignUp text-info\" to=\"/signUp\">&nbsp;Sign up</Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-2 col-lg-4\"></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.authReducer.token !== null,\r\n        error: state.authReducer.error,\r\n        loading: state.authReducer.loading,\r\n        authRedirectPath:state.authReducer.authRedirectPath\r\n    };\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuthLogin: (email, password) => dispatch(actions.authLogin(email, password))\r\n    };\r\n}\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));"],"sourceRoot":""}