{"version":3,"sources":["components/Contact/Contact.js","containers/Chat/Sidepanel.js","websocket.js","containers/Chat/Chat.js"],"names":["contact","props","react_default","a","createElement","NavLink","to","concat","chatUrl","style","color","className","src","alt","str","name","charAt","toUpperCase","slice","SidePanel","state","chats","getUserChats","token","username","axios","defaults","headers","Content-Type","Authorization","get","then","response","_this","setState","data","console","log","this","newProps","_this2","activeChats","map","chat","participants","participant","user","userId","Contact","key","status","picUrl","id","type","placeholder","aria-hidden","React","Component","connect","authReducer","WebSocketService","Object","classCallCheck","callbacks","socketRef","instance","path","WebSocket","onopen","socketNewMessage","JSON","stringify","command","onmessage","e","onerror","error","onclose","close","parsedData","parse","keys","length","messages","message","chatId","sendMessage","from","content","messagesCallback","newMessageCallback","send","objectSpread","readyState","callback","socket","recursion","waitForSocketConnection","setTimeout","WebSocketInstance","getInstance","Chat","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","sendMessageHandler","event","preventDefault","messageObject","match","params","newChatMessage","messageChangeHandler","target","value","renderTimestamp","timestamp","timeDiff","Math","round","Date","getTime","renderMessages","currentUser","i","arr","author","initializeChat","addCallbacks","setMessages","bind","addMessage","fetchMessages","_this3","disconnect","window","location","reload","component","toConsumableArray","reverse","_this4","Sidepanel","float","clear","ref","el","messagesEnd","onChange","onClick"],"mappings":"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","file":"static/js/16.e2fb59de.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst capitalize = str => {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n};\r\n\r\nconst contact = props => {\r\n  return (\r\n    <NavLink to={`${props.chatUrl}`} style={{ color: \"white\" }}>\r\n      <div className=\"chat_list \">\r\n        <div className=\"chat_people\">\r\n          <div className=\"chat_img\">\r\n            {\" \"}\r\n            <img\r\n              src=\"https://ptetutorials.com/images/user-profile.png\"\r\n              alt=\"sunil\"\r\n            />{\" \"}\r\n          </div>\r\n          <div className=\"chat_ib\">\r\n            <h5>\r\n              {capitalize(props.name)} <span className=\"chat_date\">Dec 25</span>\r\n            </h5>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default contact;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport Contact from '../../components/Contact/Contact';\r\n\r\nclass SidePanel extends React.Component {\r\n\r\n    state = {\r\n        chats: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.state.chats);\r\n        if (this.props.token !== null && this.props.username !== null) {\r\n            this.getUserChats(this.props.token, this.props.username);\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(newProps) {\r\n        if (newProps.token !== null && newProps.username !== null) {\r\n            this.getUserChats(newProps.token, newProps.username);\r\n        }\r\n    }\r\n\r\n    getUserChats = (token, username) => {\r\n        axios.defaults.headers = {\r\n            \"Content-Type\": \"application.json\",\r\n            Authorization: `Token ${token}`\r\n        }\r\n\r\n        axios.get(`http://127.0.0.1:8000/api/chat/?username=${username}`)\r\n            .then(response => {\r\n\r\n                this.setState({ chats: response.data });\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n        const activeChats = this.state.chats.map(chat => {\r\n            return (\r\n                chat.participants.map(participant => {\r\n                    if (participant.user !== +this.props.userId) {\r\n                        return (\r\n                            <Contact\r\n                                key={participant.user}\r\n                                name={participant.username}\r\n                                status=\"online\"\r\n                                picUrl=\"http://emilcarlsson.se/assets/louislitt.png\"\r\n                                chatUrl={`/messages/${chat.id}`} />\r\n                        )\r\n                    }\r\n\r\n                })\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className=\"inbox_people\">\r\n                <div className=\"headind_srch\">\r\n                    <div className=\"recent_heading\">\r\n                        <h4>Recent</h4>\r\n                    </div>\r\n                    <div className=\"srch_bar\">\r\n                        <div className=\"stylish-input-group\">\r\n                            <input type=\"text\" className=\"search-bar\" placeholder=\"Search\" />\r\n                            <span className=\"input-group-addon\">\r\n                                <button type=\"button\"> <i className=\"fa fa-search\" aria-hidden=\"true\"></i> </button>\r\n                            </span> </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"inbox_chat\">\r\n\r\n                    {activeChats}\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userId: state.authReducer.userId,\r\n        username: state.authReducer.username,\r\n        token: state.authReducer.token\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(SidePanel);","class WebSocketService {\r\n  static instance = null;\r\n  callbacks = {};\r\n\r\n  static getInstance() {\r\n    if (!WebSocketService.instance) {\r\n      WebSocketService.instance = new WebSocketService();\r\n    }\r\n    return WebSocketService.instance;\r\n  }\r\n\r\n  constructor() {\r\n    this.socketRef = null;\r\n  }\r\n\r\n  connect(chatUrl) {\r\n    const path = `ws://127.0.0.1:8000/ws/chat/${chatUrl}/`;\r\n    this.socketRef = new WebSocket(path);\r\n    this.socketRef.onopen = () => {};\r\n    this.socketNewMessage(\r\n      JSON.stringify({\r\n        command: \"fetch_messages\"\r\n      })\r\n    );\r\n    this.socketRef.onmessage = e => {\r\n      // sending message\r\n      this.socketNewMessage(e.data);\r\n    };\r\n    this.socketRef.onerror = error => {};\r\n    this.socketRef.onclose = () => {\r\n      this.connect();\r\n    };\r\n  }\r\n\r\n  disconnect() {\r\n    this.socketRef.close();\r\n  }\r\n\r\n  socketNewMessage(data) {\r\n    const parsedData = JSON.parse(data);\r\n    const command = parsedData.command;\r\n\r\n    if (Object.keys(this.callbacks).length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (command === \"messages\") {\r\n      this.callbacks[command](parsedData.messages);\r\n    }\r\n\r\n    if (command === \"new_message\") {\r\n      this.callbacks[command](parsedData.message);\r\n    }\r\n  }\r\n\r\n  fetchMessages(username, chatId) {\r\n    this.sendMessage({\r\n      command: \"fetch_messages\",\r\n      username: username,\r\n      chatId: chatId\r\n    });\r\n  }\r\n\r\n  newChatMessage(message) {\r\n    this.sendMessage({\r\n      command: \"new_message\",\r\n      from: message.from,\r\n      message: message.content,\r\n      chatId: message.chatId\r\n    });\r\n  }\r\n\r\n  addCallbacks(messagesCallback, newMessageCallback) {\r\n    this.callbacks[\"messages\"] = messagesCallback;\r\n    this.callbacks[\"new_message\"] = newMessageCallback;\r\n  }\r\n\r\n  sendMessage(data) {\r\n    try {\r\n      this.socketRef.send(JSON.stringify({ ...data }));\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n\r\n  state() {\r\n    return this.socketRef.readyState;\r\n  }\r\n\r\n  waitForSocketConnection(callback) {\r\n    const socket = this.socketRef;\r\n    const recursion = this.waitForSocketConnection;\r\n\r\n    setTimeout(function() {\r\n      if (socket.readyState === 1) {\r\n        if (callback != null) {\r\n          callback();\r\n        }\r\n        return;\r\n      } else {\r\n        recursion(callback);\r\n      }\r\n    }, 1);\r\n  }\r\n}\r\n\r\nconst WebSocketInstance = WebSocketService.getInstance();\r\n\r\nexport default WebSocketInstance;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport SidePanel from \"./Sidepanel\";\r\nimport WebSocketInstance from \"../../websocket\";\r\n\r\nclass Chat extends React.Component {\r\n  state = {\r\n    message: \"\"\r\n  };\r\n\r\n  initializeChat() {\r\n    this.waitForSocketConnection(() => {\r\n      WebSocketInstance.addCallbacks(\r\n        this.setMessages.bind(this),\r\n        this.addMessage.bind(this)\r\n      );\r\n      WebSocketInstance.fetchMessages(\r\n        this.props.username,\r\n        this.props.match.params.id\r\n      );\r\n    });\r\n\r\n    // Get chat id from url path\r\n    if (this.props.match.params.id) {\r\n      WebSocketInstance.connect(this.props.match.params.id);\r\n    } else {\r\n      WebSocketInstance.connect(null);\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.initializeChat();\r\n  }\r\n\r\n  scrollToBottom = () => {\r\n    // this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    if (this.props.match.params.id !== newProps.match.params.id) {\r\n      WebSocketInstance.disconnect();\r\n      this.waitForSocketConnection(() => {\r\n        WebSocketInstance.fetchMessages(\r\n          this.props.username,\r\n          newProps.match.params.id\r\n        );\r\n      });\r\n\r\n      // Get chat id from url path\r\n      WebSocketInstance.connect(newProps.match.params.id);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    WebSocketInstance.disconnect();\r\n    window.location.reload();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  waitForSocketConnection(callback) {\r\n    const component = this;\r\n\r\n    setTimeout(function() {\r\n      if (WebSocketInstance.state() === 1) {\r\n        callback();\r\n        return;\r\n      } else {\r\n        component.waitForSocketConnection(callback);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  addMessage(message) {\r\n    this.setState({ messages: [...this.state.messages, message] });\r\n  }\r\n\r\n  setMessages(messages) {\r\n    this.setState({ messages: messages.reverse() });\r\n  }\r\n\r\n  sendMessageHandler = event => {\r\n    event.preventDefault();\r\n    const messageObject = {\r\n      from: this.props.username,\r\n      content: this.state.message,\r\n      chatId: this.props.match.params.id\r\n    };\r\n    WebSocketInstance.newChatMessage(messageObject);\r\n    this.setState({ message: \"\" });\r\n  };\r\n\r\n  messageChangeHandler = event => {\r\n    this.setState({ message: event.target.value });\r\n  };\r\n\r\n  renderTimestamp = timestamp => {\r\n    let prefix = \"\";\r\n    const timeDiff = Math.round(\r\n      (new Date().getTime() - new Date(timestamp).getTime()) / 60000\r\n    );\r\n    if (timeDiff < 60 && timeDiff > 1) {\r\n      // less than 60 mintes ago\r\n      prefix = `${timeDiff} minutes ago`;\r\n    } else if (timeDiff < 24 * 60 && timeDiff > 60) {\r\n      // less than 24 hours ago\r\n      prefix = `${Math.round(timeDiff / 60)} hours ago`;\r\n    } else if (timeDiff < 31 * 24 * 60 && timeDiff > 24 * 60) {\r\n      // less than 7 days ago\r\n      prefix = `${Math.round((timeDiff / 60) * 24)} days ago`;\r\n    } else {\r\n      prefix = `${new Date(timestamp)}`;\r\n    }\r\n    return prefix;\r\n  };\r\n\r\n  renderMessages = messages => {\r\n    const currentUser = this.props.username;\r\n\r\n    return messages.map((message, i, arr) => (\r\n      <div\r\n        key={message.id}\r\n        className={\r\n          message.author === currentUser ? \"outgoing_msg\" : \"incoming_msg\"\r\n        }\r\n      >\r\n        <div\r\n          className={\r\n            message.author === currentUser ? \"sent_msg\" : \"received_msg\"\r\n          }\r\n        >\r\n          <p>{message.content}</p>\r\n          <span className=\"time_date\">\r\n            {this.renderTimestamp(message.timestamp)}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  render() {\r\n    const messages = this.state.messages;\r\n\r\n    return (\r\n      <div className=\"Chat-Container\">\r\n        <div className=\"messaging\">\r\n          <div className=\"inbox_msg\">\r\n            <SidePanel />\r\n\r\n            <div className=\"mesgs\">\r\n              <div className=\"msg_history\">\r\n                {messages && this.renderMessages(messages)}\r\n                <div\r\n                  style={{ float: \"left\", clear: \"both\" }}\r\n                  ref={el => {\r\n                    this.messagesEnd = el;\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"type_msg\">\r\n                <div className=\"input_msg_write\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"write_msg\"\r\n                    placeholder=\"Type a message\"\r\n                    onChange={this.messageChangeHandler}\r\n                    value={this.state.message}\r\n                  />\r\n\r\n                  <button\r\n                    className=\"msg_send_btn\"\r\n                    type=\"button\"\r\n                    onClick={this.sendMessageHandler}\r\n                  >\r\n                    <i className=\"fas fa-paper-plane\" aria-hidden=\"true\" />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    username: state.authReducer.username\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Chat);\r\n"],"sourceRoot":""}